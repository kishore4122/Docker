Extra Packages for Enterprise Linux (EPEL)
------------------------------------------
CentOS Stream 8: 
dnf config-manager --set-enabled powertools
dnf install epel-release epel-next-release

Setup Java & Maven
-------------------
Java-8:
sudo yum list | grep openjdk
sudo yum install -y java-1.8.8-openjdk
sudo yum install -y java-1.8.8-openjdk-devel.x86_64

Java-11:
sudo amazon-linux-extras install epel
sudo amazon-linux-extras install java-openjdk11 -y
sudo yun install epel-release java-11-openjdk-devel -y(ignore)

sudo alternatives --config java
sudo /usr/sbin/alternatives--set java /usr/lib/jvm/jre-1.8.8-openjdk/bin/java

Maven:
cd /opt
sudo curl -0 https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz 
sudo tar -xvzf apache-maven-3.8.4-bin.tar.gz
echo "export M2_HOME="/opt/apache-maven-3.8.4" >> ~/.bashre
echo "export PATH="$PATH:/opt/apache-maven-3.8.4/bin" >> ~/.bashrc 
source/.bashre
mvn -version





Docker images
Official Images:https://github.com/docker-library/official-images (or)
https://github.com/docker-library/docs (or)
https://github.com/
docker-library/docs/tree/master/python
docker search ubuntu
docker history<image_name>->Get history of image/details of each layer
docker image inspect<image_name>
docker pull ubuntu->Pull an image from DockerHub
docker pull hello-world
docker image rm<image_name>->Removes an image
docker rmi<image_name>->Another command to Remove an image
docker image prune -a>Remove all unused docker images;containers that are not using these images

By default,you are prompted to continue.To bypass the prompt,use the -f or --force flag.
You can limit which images are pruned using filtering expressions with the filter flag.
For example,to only consider
docker image prune -a --filter"until-24h"

docker image tag SOURCE_IMAGE[:TAG]TARGET_IMAGE[:TAG]>Rename an image
docker image push<image>->Push image to docker repository(need to login,see docker login -- help)
docker login -u<user_name><URL>;URL can be left blank if pushing to DockerHub
docker login -u<user-name>-p<password/token><URL>
docker logout

docker image save <image_name:tag> -o <new-image_name:tag>.tar
docker image save <image_name:tag> > <new-image_name:tag>.tar

docker image load < <new-image_name:tag>.tar 


Docker containers
--------------------
https://container.training/intro-selfpaced.yml.html#103
https://rakeshjain-devops.medium.com/
elucidating-containers-and-container-runtimes-b4897b45b377

Example images:
hello world(tutum)
jpetazzo/clock
Jenkins,Nexus3,Ubuntu,Nginx
docker container run jpetazzo/clock
docker ps
                      
docker run -it ubuntu;apt update -y;apt-get install -y iputils-ping;apt install
figlet;figlet DevopsI
Ctrl+p+q->come out of interactive mode

docker run busybox echo "hello form busybox"
docker run -it busybox sh

docker run -it ubuntu hostname
docker run -it --name os ubuntu hostname
docker run -it --restart=always ubuntu hostname

Flag							Description
---------------------------------------------------------------------------------
no								Do not automatically restart the container. (the default)
on-failure[:max-retries]		Restart the container if it exits due to an error, 
								which manifests as a non-zero exit code. Optionally, 
								limit the number of times the Docker daemon attempts to restart the container using the :max-retries option.
always							Always restart the container if it stops. 
								If it is manually stopped, it is restarted only when Docker daemon restarts or the container itself is manually restarted. (See the second bullet listed in restart policy details)
unless-stopped					Similar to always, except that when the container is stopped (manually or otherwise), 
								it is not restarted even after Docker daemon restarts.


supported: no, on-failure, always, unless-stopped
(https://docs.docker.com/config/containers/start-containers-automatically/)

docker commit -m "ubuntu with ping"  <container id> ubuntu-ping
docker run -it ubuntu ping 8.8.8.8
docker run -it ubuntu-ping ping 8.8.8.8

docker logs <container id>
docker logs -f <container id>
docker logs -f --tail <number> <container id> -> get live logs one line at a time

docker run -p HOST_PORT:CONTAINER_PORT -e ENV_VAR=VALUE COMMAND
(https://www.sciencedirect.com/topics/computer-science/registered-port)

docker run -it -p 80:5000 kunchalavikram/flask-simpledetails:v1

docker container run --publish 80:80 nginx
docker container run --publish 80:80 --detach nginx
docker container run --publish 80:80 -d nginx

docker container attach nginx -> Reattach the container to terminal/std_output

docker ps
docker ps -a
docker ps -a -q -> list only container ids
docker rm <container id / container name>
docker rm -f $(docker ps -a -q) --> remove all the contianers forcefully

docker container run --publish 80:80 --name webhost nginx
docker run --rm --name c1 alpine echo hello
docker run --restart=always --rm --name c1 alpine echo hello

docker run -it --rm -p 8080:3000 -p 8081:3001 -e RACK_ENV=development -e HSTNAME=my-container <image>

docker run -p JOST_PORT:CONTAINER_PORT -e	ENV_var=VALUE IMAGE
docker run -d -p 3306:3306 --name db -e MYSQL-RANDOM_ROOT_PASSWORD=yes mysql
docker run --env-file=env_file_name alpine printenv
docker run -it --rm centos:7 curl --version

docker container start <container id>
docker container stop <container id>
docker container start $(docker ps -a -q)
docker container kill <container id>

-------------STOP vs KILL
docker stop attempsts to gracefully shutdown containers by issuing a SIGTERM signal to the main process inside the container

docker kill by default immediately stops/terminates them by issuing a SIGKILL signal to the main process

docker container rm <container id1> <container id2>
docker container rm -f <container id>
docker container rm -f $(docker ps -a -q)
docker rm $(docker ps -a -q -f status=exited)

docker commit -m "message" <container id> <new-image-name>
docker top <container>
docker container inspect <container id>
docker container stats <container id> -> gives info of specific container
docker stats -> give info of all containers

docker diff <container id> --> list the changed files and directories in a container filesystem  since the conatiner was created.
Three different types of change are tracked.
A = file or directory was added
D = file or directory was deleted
C = file or directory was changed


docker export <container id> -o file.tar 
docker export <container id> > file.tar
docker import file.tar -> this creates a new untagged image

docker events -> use docker events ti get real-time events from the server



 



Docker Registry
registry:2
https://docs.docker.com/registry/deploying/
https://docs.docker.com/registry/spec/api/
https://www.exoscale.com/syslog/setup-private-docker-registry/
Aregistry can be considered private if pulling requires authentication
docker login -u<user-name>-p<password><ReposURESle Easy
Once you login,aauth token will be saved under~/.docker/config.json in user's home
directory
It is username:password base64 encoded
echo -n'username:password'|base64->To manually encode
echo'ENCODED_VALUE'|base64 -dI>To decode

cat ~/.docker/config.json
	{
		"auths": {
				"https://index.docker.io/v1/": {
							"auth": "erejlkjsdfguqweljlksdajfi"
				}
		}
	}